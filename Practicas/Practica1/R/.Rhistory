"2023-12-25",  # Navidad
"2023-12-31"   # Fin de Año
))
# Definir períodos de ciclo escolar en Guatemala 2023
# Ciclo escolar típico: febrero-octubre
inicio_ciclo_escolar <- as.Date("2023-02-01")
fin_ciclo_escolar <- as.Date("2023-10-31")
# Agregar todas las variables contextuales
datos_enriquecidos <- datos %>%
mutate(
# Variables básicas de tiempo
dia_semana = weekdays(fecha),
dia_semana_num = wday(fecha, week_start = 1),  # 1=Lunes, 7=Domingo
# Clasificaciones de días
es_fin_semana = dia_semana_num %in% c(6, 7),  # Sábado y Domingo
es_semana_laboral = dia_semana_num %in% c(1, 2, 3, 4),  # Lunes a Jueves
es_viernes = dia_semana_num == 5,
# Estación del año (Hemisferio Norte - Guatemala)
estacion = case_when(
mes %in% c(12, 1, 2) ~ "Verano",     # Diciembre-Febrero (seco)
mes %in% c(3, 4, 5) ~ "Primavera",  # Marzo-Mayo (transición)
mes %in% c(6, 7, 8) ~ "Invierno",   # Junio-Agosto (lluvioso)
mes %in% c(9, 10, 11) ~ "Otoño"     # Septiembre-Noviembre (transición)
),
# Ciclo escolar
es_ciclo_escolar_activo = fecha >= inicio_ciclo_escolar & fecha <= fin_ciclo_escolar,
# Feriados
es_feriado = fecha %in% feriados_guatemala_2023,
# Clasificaciones de períodos
tipo_dia = case_when(
es_feriado ~ "Feriado",
es_fin_semana ~ "Fin de Semana",
es_semana_laboral ~ "Semana Laboral",
es_viernes ~ "Viernes",
TRUE ~ "Otro"
),
# Clasificación de horarios
periodo_dia = case_when(
hora_inicio >= 0 & hora_inicio < 6 ~ "Madrugada",
hora_inicio >= 6 & hora_inicio < 12 ~ "Mañana",
hora_inicio >= 12 & hora_inicio < 18 ~ "Tarde",
hora_inicio >= 18 & hora_inicio < 24 ~ "Noche"
),
# Mes como factor ordenado
mes_factor = factor(mes_nombre, levels = c("ENERO", "FEBRERO", "MARZO", "ABRIL",
"MAYO", "JUNIO", "JULIO", "AGOSTO",
"SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE")),
# Día de la semana como factor ordenado
dia_semana_factor = factor(dia_semana, levels = c("lunes", "martes", "miércoles",
"jueves", "viernes", "sábado", "domingo"))
)
return(datos_enriquecidos)
}
realizar_analisis_estadistico <- function(datos) {
# Estadísticas generales
resumen_general <- datos %>%
summarise(
total_registros = n(),
consumo_promedio = mean(consumo_mwh, na.rm = TRUE),
consumo_mediano = median(consumo_mwh, na.rm = TRUE),
consumo_min = min(consumo_mwh, na.rm = TRUE),
consumo_max = max(consumo_mwh, na.rm = TRUE),
desviacion_std = sd(consumo_mwh, na.rm = TRUE),
consumo_total_anual = sum(consumo_mwh, na.rm = TRUE)
)
print(resumen_general)
analisis_tipo_dia <- datos %>%
group_by(tipo_dia) %>%
summarise(
registros = n(),
consumo_promedio = mean(consumo_mwh, na.rm = TRUE),
consumo_total = sum(consumo_mwh, na.rm = TRUE),
desviacion_std = sd(consumo_mwh, na.rm = TRUE),
.groups = 'drop'
) %>%
arrange(desc(consumo_promedio))
print(analisis_tipo_dia)
analisis_estacion <- datos %>%
group_by(estacion) %>%
summarise(
registros = n(),
consumo_promedio = mean(consumo_mwh, na.rm = TRUE),
consumo_total = sum(consumo_mwh, na.rm = TRUE),
desviacion_std = sd(consumo_mwh, na.rm = TRUE),
.groups = 'drop'
) %>%
arrange(desc(consumo_promedio))
print(analisis_estacion)
cat("\n=== ANÁLISIS POR PERÍODO DEL DÍA ===\n")
# Análisis por período del día
analisis_periodo_dia <- datos %>%
group_by(periodo_dia) %>%
summarise(
registros = n(),
consumo_promedio = mean(consumo_mwh, na.rm = TRUE),
consumo_total = sum(consumo_mwh, na.rm = TRUE),
desviacion_std = sd(consumo_mwh, na.rm = TRUE),
.groups = 'drop'
) %>%
arrange(desc(consumo_promedio))
print(analisis_periodo_dia)
# Retornar lista con todos los análisis
return(list(
general = resumen_general,
tipo_dia = analisis_tipo_dia,
estacion = analisis_estacion,
periodo_dia = analisis_periodo_dia
))
}
generar_visualizaciones <- function(datos) {
# 1. Consumo promedio por mes
grafico1 <- datos %>%
group_by(mes_factor) %>%
summarise(consumo_promedio = mean(consumo_mwh, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = mes_factor, y = consumo_promedio)) +
geom_col(fill = "steelblue", alpha = 0.7) +
theme_minimal() +
labs(title = "Consumo Energético Promedio por Mes",
x = "Mes", y = "Consumo Promedio (MWh)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Consumo por tipo de día
grafico2 <- datos %>%
group_by(tipo_dia) %>%
summarise(consumo_promedio = mean(consumo_mwh, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = reorder(tipo_dia, consumo_promedio), y = consumo_promedio)) +
geom_col(fill = "coral", alpha = 0.7) +
coord_flip() +
theme_minimal() +
labs(title = "Consumo Energético por Tipo de Día",
x = "Tipo de Día", y = "Consumo Promedio (MWh)")
# 3. Patrón diario promedio por hora
grafico3 <- datos %>%
group_by(hora_inicio) %>%
summarise(consumo_promedio = mean(consumo_mwh, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = hora_inicio, y = consumo_promedio)) +
geom_line(color = "darkgreen", size = 1) +
geom_point(color = "darkgreen", size = 2) +
scale_x_continuous(breaks = seq(0, 23, 2)) +
theme_minimal() +
labs(title = "Patrón de Consumo por Hora del Día",
x = "Hora", y = "Consumo Promedio (MWh)")
# 4. Consumo por estación
grafico4 <- datos %>%
group_by(estacion) %>%
summarise(consumo_promedio = mean(consumo_mwh, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = estacion, y = consumo_promedio)) +
geom_col(fill = "orange", alpha = 0.7) +
theme_minimal() +
labs(title = "Consumo Energético por Estación",
x = "Estación", y = "Consumo Promedio (MWh)")
# 5. Boxplot de consumo por día de la semana
grafico5 <- datos %>%
ggplot(aes(x = dia_semana_factor, y = consumo_mwh)) +
geom_boxplot(fill = "lightblue", alpha = 0.7) +
theme_minimal() +
labs(title = "Distribución de Consumo por Día de la Semana",
x = "Día de la Semana", y = "Consumo (MWh)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 6. Comparación ciclo escolar vs no escolar
grafico6 <- datos %>%
mutate(ciclo_escolar = ifelse(es_ciclo_escolar_activo, "Ciclo Activo", "Ciclo Inactivo")) %>%
group_by(ciclo_escolar, hora_inicio) %>%
summarise(consumo_promedio = mean(consumo_mwh, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = hora_inicio, y = consumo_promedio, color = ciclo_escolar)) +
geom_line(size = 1) +
geom_point(size = 2) +
scale_x_continuous(breaks = seq(0, 23, 2)) +
theme_minimal() +
labs(title = "Patrón de Consumo: Ciclo Escolar vs No Escolar",
x = "Hora", y = "Consumo Promedio (MWh)",
color = "Período")
# Mostrar todos los gráficos
grid.arrange(grafico1, grafico2, ncol = 2)
grid.arrange(grafico3, grafico4, ncol = 2)
grid.arrange(grafico5, grafico6, ncol = 2)
# Retornar lista de gráficos para uso posterior
return(list(
mensual = grafico1,
tipo_dia = grafico2,
horario = grafico3,
estacional = grafico4,
semanal = grafico5,
ciclo_escolar = grafico6
))
}
ejecutar_analisis_completo <- function(ruta_archivo) {
# Cargar datos
datos_energia <- cargar_datos_energia(ruta_archivo)
# Agregar variables contextuales
datos_enriquecidos <- agregar_variables_contextuales(datos_energia)
# Realizar análisis estadístico
resultados_estadisticos <- realizar_analisis_estadistico(datos_enriquecidos)
# Generar visualizaciones
graficos <- generar_visualizaciones(datos_enriquecidos)
# Guardar datos procesados
write.csv(datos_enriquecidos, "datos_energia_enriquecidos_2023.csv", row.names = FALSE)
# Retornar todos los resultados
return(list(
datos = datos_enriquecidos,
estadisticas = resultados_estadisticos,
graficos = graficos
))
}
# Especificar la ruta del archivo Excel
# CAMBIAR POR LA RUTA CORRECTA DE TU ARCHIVO
ruta_archivo <- "POE_2023.xlsx"
# Verificar si el archivo existe
if (file.exists(ARCHIVO_EXCEL)) {
# Ejecutar análisis completo
resultados <- ejecutar_analisis_completo(ARCHIVO_EXCEL)
cat("\n=== RESUMEN DE INSIGHTS CLAVE ===\n")
cat("1. Total de registros procesados:", nrow(resultados$datos), "\n")
cat("2. Consumo total anual:", round(sum(resultados$datos$consumo_mwh, na.rm = TRUE), 2), "MWh\n")
cat("3. Consumo promedio diario:", round(mean(resultados$datos$consumo_mwh, na.rm = TRUE), 2), "MWh\n")
cat("4. Archivo de datos enriquecidos guardado exitosamente\n")
} else {
cat("ERROR: El archivo", ruta_archivo, "no fue encontrado.\n")
cat("Por favor, verifica la ruta del archivo y vuelve a intentar.\n")
}
# Cargar librerías necesarias
library(readxl)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(scales)
library(kableExtra)
# Cargar librerías necesarias
library(readxl)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(scales)
library(kableExtra)
cargar_datos_energia <- function(archivo_excel) {
# Nombres de los meses en español (como aparecen en las hojas)
meses <- c("ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO",
"JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE")
# Días por mes en 2023 (año no bisiesto)
dias_por_mes <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
# Lista para almacenar todos los datos
datos_completos <- list()
for (i in 1:12) {
# Leer la hoja del mes actual
datos_mes <- read_excel(archivo_excel, sheet = meses[i], skip = 2)
# Obtener número de días del mes actual
dias_mes <- dias_por_mes[i]
# Seleccionar solo las columnas necesarias (Hora + días del mes)
columnas_necesarias <- c("Hora", as.character(1:dias_mes))
datos_mes <- datos_mes[, columnas_necesarias]
# Convertir a formato largo (tidy data)
datos_largo <- datos_mes %>%
pivot_longer(cols = -Hora,
names_to = "dia",
values_to = "consumo_mwh") %>%
mutate(
mes = i,
mes_nombre = meses[i],
dia = as.numeric(dia),
# Crear fecha completa
fecha = as.Date(paste(2023, mes, dia, sep = "-")),
# Extraer hora de inicio del intervalo
hora_inicio = as.numeric(substr(Hora, 1, 2))
) %>%
filter(!is.na(consumo_mwh) & !is.na(fecha))  # Filtrar valores NA
# Agregar a la lista
datos_completos[[i]] <- datos_largo
}
# Combinar todos los meses
datos_final <- bind_rows(datos_completos)
return(datos_final)
}
agregar_variables_contextuales <- function(datos) {
# Definir feriados de Guatemala 2023
feriados_guatemala_2023 <- as.Date(c(
"2023-01-01",  # Año Nuevo
"2023-04-06",  # Jueves Santo
"2023-04-07",  # Viernes Santo
"2023-04-08",  # Sábado de Gloria
"2023-05-01",  # Día del Trabajo
"2023-06-30",  # Día del Ejército
"2023-09-15",  # Día de la Independencia
"2023-10-20",  # Día de la Revolución
"2023-11-01",  # Día de Todos los Santos
"2023-12-24",  # Nochebuena
"2023-12-25",  # Navidad
"2023-12-31"   # Fin de Año
))
# Definir períodos de ciclo escolar en Guatemala 2023
# Ciclo escolar típico: febrero-octubre
inicio_ciclo_escolar <- as.Date("2023-02-01")
fin_ciclo_escolar <- as.Date("2023-10-31")
# Agregar todas las variables contextuales
datos_enriquecidos <- datos %>%
mutate(
# Variables básicas de tiempo
dia_semana = weekdays(fecha),
dia_semana_num = wday(fecha, week_start = 1),  # 1=Lunes, 7=Domingo
# Clasificaciones de días
es_fin_semana = dia_semana_num %in% c(6, 7),  # Sábado y Domingo
es_semana_laboral = dia_semana_num %in% c(1, 2, 3, 4),  # Lunes a Jueves
es_viernes = dia_semana_num == 5,
# Estación del año (Hemisferio Norte - Guatemala)
estacion = case_when(
mes %in% c(12, 1, 2) ~ "Verano",     # Diciembre-Febrero (seco)
mes %in% c(3, 4, 5) ~ "Primavera",  # Marzo-Mayo (transición)
mes %in% c(6, 7, 8) ~ "Invierno",   # Junio-Agosto (lluvioso)
mes %in% c(9, 10, 11) ~ "Otoño"     # Septiembre-Noviembre (transición)
),
# Ciclo escolar
es_ciclo_escolar_activo = fecha >= inicio_ciclo_escolar & fecha <= fin_ciclo_escolar,
# Feriados
es_feriado = fecha %in% feriados_guatemala_2023,
# Clasificaciones de períodos
tipo_dia = case_when(
es_feriado ~ "Feriado",
es_fin_semana ~ "Fin de Semana",
es_semana_laboral ~ "Semana Laboral",
es_viernes ~ "Viernes",
TRUE ~ "Otro"
),
# Clasificación de horarios
periodo_dia = case_when(
hora_inicio >= 0 & hora_inicio < 6 ~ "Madrugada",
hora_inicio >= 6 & hora_inicio < 12 ~ "Mañana",
hora_inicio >= 12 & hora_inicio < 18 ~ "Tarde",
hora_inicio >= 18 & hora_inicio < 24 ~ "Noche"
),
# Mes como factor ordenado
mes_factor = factor(mes_nombre, levels = c("ENERO", "FEBRERO", "MARZO", "ABRIL",
"MAYO", "JUNIO", "JULIO", "AGOSTO",
"SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE")),
# Día de la semana como factor ordenado
dia_semana_factor = factor(dia_semana, levels = c("lunes", "martes", "miércoles",
"jueves", "viernes", "sábado", "domingo"))
)
return(datos_enriquecidos)
}
realizar_analisis_estadistico <- function(datos) {
# Estadísticas generales
resumen_general <- datos %>%
summarise(
total_registros = n(),
consumo_promedio = mean(consumo_mwh, na.rm = TRUE),
consumo_mediano = median(consumo_mwh, na.rm = TRUE),
consumo_min = min(consumo_mwh, na.rm = TRUE),
consumo_max = max(consumo_mwh, na.rm = TRUE),
desviacion_std = sd(consumo_mwh, na.rm = TRUE),
consumo_total_anual = sum(consumo_mwh, na.rm = TRUE)
)
print(resumen_general)
analisis_tipo_dia <- datos %>%
group_by(tipo_dia) %>%
summarise(
registros = n(),
consumo_promedio = mean(consumo_mwh, na.rm = TRUE),
consumo_total = sum(consumo_mwh, na.rm = TRUE),
desviacion_std = sd(consumo_mwh, na.rm = TRUE),
.groups = 'drop'
) %>%
arrange(desc(consumo_promedio))
print(analisis_tipo_dia)
analisis_estacion <- datos %>%
group_by(estacion) %>%
summarise(
registros = n(),
consumo_promedio = mean(consumo_mwh, na.rm = TRUE),
consumo_total = sum(consumo_mwh, na.rm = TRUE),
desviacion_std = sd(consumo_mwh, na.rm = TRUE),
.groups = 'drop'
) %>%
arrange(desc(consumo_promedio))
print(analisis_estacion)
cat("\n=== ANÁLISIS POR PERÍODO DEL DÍA ===\n")
# Análisis por período del día
analisis_periodo_dia <- datos %>%
group_by(periodo_dia) %>%
summarise(
registros = n(),
consumo_promedio = mean(consumo_mwh, na.rm = TRUE),
consumo_total = sum(consumo_mwh, na.rm = TRUE),
desviacion_std = sd(consumo_mwh, na.rm = TRUE),
.groups = 'drop'
) %>%
arrange(desc(consumo_promedio))
print(analisis_periodo_dia)
# Retornar lista con todos los análisis
return(list(
general = resumen_general,
tipo_dia = analisis_tipo_dia,
estacion = analisis_estacion,
periodo_dia = analisis_periodo_dia
))
}
generar_visualizaciones <- function(datos) {
# 1. Consumo promedio por mes
grafico1 <- datos %>%
group_by(mes_factor) %>%
summarise(consumo_promedio = mean(consumo_mwh, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = mes_factor, y = consumo_promedio)) +
geom_col(fill = "steelblue", alpha = 0.7) +
theme_minimal() +
labs(title = "Consumo Energético Promedio por Mes",
x = "Mes", y = "Consumo Promedio (MWh)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Consumo por tipo de día
grafico2 <- datos %>%
group_by(tipo_dia) %>%
summarise(consumo_promedio = mean(consumo_mwh, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = reorder(tipo_dia, consumo_promedio), y = consumo_promedio)) +
geom_col(fill = "coral", alpha = 0.7) +
coord_flip() +
theme_minimal() +
labs(title = "Consumo Energético por Tipo de Día",
x = "Tipo de Día", y = "Consumo Promedio (MWh)")
# 3. Patrón diario promedio por hora
grafico3 <- datos %>%
group_by(hora_inicio) %>%
summarise(consumo_promedio = mean(consumo_mwh, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = hora_inicio, y = consumo_promedio)) +
geom_line(color = "darkgreen", size = 1) +
geom_point(color = "darkgreen", size = 2) +
scale_x_continuous(breaks = seq(0, 23, 2)) +
theme_minimal() +
labs(title = "Patrón de Consumo por Hora del Día",
x = "Hora", y = "Consumo Promedio (MWh)")
# 4. Consumo por estación
grafico4 <- datos %>%
group_by(estacion) %>%
summarise(consumo_promedio = mean(consumo_mwh, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = estacion, y = consumo_promedio)) +
geom_col(fill = "orange", alpha = 0.7) +
theme_minimal() +
labs(title = "Consumo Energético por Estación",
x = "Estación", y = "Consumo Promedio (MWh)")
# 5. Boxplot de consumo por día de la semana
grafico5 <- datos %>%
ggplot(aes(x = dia_semana_factor, y = consumo_mwh)) +
geom_boxplot(fill = "lightblue", alpha = 0.7) +
theme_minimal() +
labs(title = "Distribución de Consumo por Día de la Semana",
x = "Día de la Semana", y = "Consumo (MWh)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 6. Comparación ciclo escolar vs no escolar
grafico6 <- datos %>%
mutate(ciclo_escolar = ifelse(es_ciclo_escolar_activo, "Ciclo Activo", "Ciclo Inactivo")) %>%
group_by(ciclo_escolar, hora_inicio) %>%
summarise(consumo_promedio = mean(consumo_mwh, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = hora_inicio, y = consumo_promedio, color = ciclo_escolar)) +
geom_line(size = 1) +
geom_point(size = 2) +
scale_x_continuous(breaks = seq(0, 23, 2)) +
theme_minimal() +
labs(title = "Patrón de Consumo: Ciclo Escolar vs No Escolar",
x = "Hora", y = "Consumo Promedio (MWh)",
color = "Período")
# Mostrar todos los gráficos
grid.arrange(grafico1, grafico2, ncol = 2)
grid.arrange(grafico3, grafico4, ncol = 2)
grid.arrange(grafico5, grafico6, ncol = 2)
# Retornar lista de gráficos para uso posterior
return(list(
mensual = grafico1,
tipo_dia = grafico2,
horario = grafico3,
estacional = grafico4,
semanal = grafico5,
ciclo_escolar = grafico6
))
}
ejecutar_analisis_completo <- function(ruta_archivo) {
# Cargar datos
datos_energia <- cargar_datos_energia(ruta_archivo)
# Agregar variables contextuales
datos_enriquecidos <- agregar_variables_contextuales(datos_energia)
# Realizar análisis estadístico
resultados_estadisticos <- realizar_analisis_estadistico(datos_enriquecidos)
# Generar visualizaciones
graficos <- generar_visualizaciones(datos_enriquecidos)
# Guardar datos procesados
write.csv(datos_enriquecidos, "datos_energia_enriquecidos_2023.csv", row.names = FALSE)
# Retornar todos los resultados
return(list(
datos = datos_enriquecidos,
estadisticas = resultados_estadisticos,
graficos = graficos
))
}
# Especificar la ruta del archivo Excel
# CAMBIAR POR LA RUTA CORRECTA DE TU ARCHIVO
ruta_archivo <- "POE_2023.xlsx"
# Verificar si el archivo existe
if (file.exists(ARCHIVO_EXCEL)) {
# Ejecutar análisis completo
resultados <- ejecutar_analisis_completo(ARCHIVO_EXCEL)
cat("\n=== RESUMEN DE INSIGHTS CLAVE ===\n")
cat("1. Total de registros procesados:", nrow(resultados$datos), "\n")
cat("2. Consumo total anual:", round(sum(resultados$datos$consumo_mwh, na.rm = TRUE), 2), "MWh\n")
cat("3. Consumo promedio diario:", round(mean(resultados$datos$consumo_mwh, na.rm = TRUE), 2), "MWh\n")
cat("4. Archivo de datos enriquecidos guardado exitosamente\n")
} else {
cat("ERROR: El archivo", ruta_archivo, "no fue encontrado.\n")
cat("Por favor, verifica la ruta del archivo y vuelve a intentar.\n")
}
unlink("[MyS1]P1_G6_Copia3_cache", recursive = TRUE)
---
title: "Practica 1 - G8"
Smart Packaging es una solución innovadora que demuestra el potencial de aplicar tecnología avanzada a los procesos logísticos de empaque. Sin embargo, los inversores de la empresa han expresado preocupación por el incremento constante en los costos energéticos. Uno de los inversores obtuvo información detallada sobre el consumo energético y la exportó en el archivo POE_2023.xlsx, el cual contiene registros del consumo medido en MWh. Este inversor considera que dicha información es clave para evaluar la rentabilidad del negocio. Con base en la construcción de un modelo de análisis, se desea responder a las siguientes preguntas:
View(costos_mensuales_nuevos)
