knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 10, fig.height = 6)
# Cargar librerías necesarias
library(readxl)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(scales)
library(knitr)
library(kableExtra)
# Cargar las librerías
library(readxl)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
ARCHIVO_EXCEL <- "POE_2023.xlsx"
# horario laboral: de 8:00 AM a 8:00 PM (20:00 horas)
HORARIO_LABORAL <- 8:20
# días laborales promedio por mes
DIAS_LABORALES_MES <- 30
# Parámetros del problema
CONSUMO_ACTUAL <- 0.2
HORAS_ACTUALES <- 12 #las horas que se trabajan al dia
MESES <- c("ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO",
"JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE")
procesar_datos_energia <- function(archivo_excel) {
if (!file.exists(archivo_excel)) {
stop(paste("Error: No se encuentra el archivo", archivo_excel))
}
#almacenar todos los datos procesados
datos_completos <- data.frame()
# Procesar cada mes del año
for (i in 1:length(MESES)) {
mes <- MESES[i]
tryCatch({
# Leer la hoja correspondiente al mes actual del archivo Excel
datos_raw <- read_excel(archivo_excel, sheet = mes, col_names = FALSE, col_types = "text")
# Buscar en qué fila está la palabra "Hora" porque ahi van a iniciar los datos
fila_hora <- which(datos_raw[[1]] == "Hora", arr.ind = TRUE)
if (length(fila_hora) > 0) {
# Los datos reales empiezan en la fila de abajo
inicio_datos <- fila_hora[1] + 1
# Extraer solo las filas que contienen datos
datos_mes <- datos_raw[inicio_datos:nrow(datos_raw), ]
# Sacamos los encabezados para saber los dias del mes
encabezados <- datos_raw[fila_hora[1], ]
dias_mes <- suppressWarnings(as.numeric(unlist(encabezados[3:ncol(encabezados)])))
# Filtrar solo días válidos (entre 1 y 31, sin valores NA)
dias_mes <- dias_mes[!is.na(dias_mes) & dias_mes >= 1 & dias_mes <= 31]
registros_mes <- 0
# Procesar cada fila de datos que vendra siendo cada hora del dia
for (fila in 1:nrow(datos_mes)) {
primera_col <- datos_mes[fila, 1]
# Verificar que la celda no esté vacía
if (!is.na(primera_col) && !is.null(primera_col) && primera_col != "") {
# VAlidamos que los datos vengan en formato de fraccion que es el formato que usa excel para las horas
# suppressWarnings evita mostrar advertencias si la conversión falla
hora_fraccion <- suppressWarnings(as.numeric(primera_col))
if (!is.na(hora_fraccion) && is.numeric(hora_fraccion)) {
# Convertir la fracción de día a hora del día (0-23) para que sea facil de entender
hora <- floor(hora_fraccion * 24)
if (!is.na(hora) && hora >= 0 && hora <= 23) {
# Procesar cada día del mes actual
for (col in 1:length(dias_mes)) {
dia <- dias_mes[col]
# Obtener el precio de energía para esta hora y día específicos
# col + 2 porque las primeras 2 columnas son hora, los días empiezan en la 3ra
precio_raw <- datos_mes[fila, col + 2]
precio <- suppressWarnings(as.numeric(precio_raw))
if (!is.na(precio) && !is.na(dia) && precio > 0) {
# Agregar este registro al data frame de datos completos
datos_completos <- rbind(datos_completos, data.frame(
mes = mes,
mes_num = i,
dia = dia,
hora = hora,
precio_mwh = precio,    # Precio de energía en USD/MWh
stringsAsFactors = FALSE
))
# Incrementar el contador de registros procesados para este mes
registros_mes <- registros_mes + 1
}
}
}
}
}
}
#cat(registros_mes, "registros\n")
} else {
# Si no se encontró la fila de "Hora"
#cat("no se encontró fila 'Hora'\n")
}
}, error = function(e) {
# Si ocurre algún error durante el procesamiento, mostrar el mensaje
cat("Error:", conditionMessage(e), "\n")
})
}
# Mostrar el total de registros procesados de todos los meses
cat("Total de registros procesados:", nrow(datos_completos), "\n")
return(datos_completos)
}
